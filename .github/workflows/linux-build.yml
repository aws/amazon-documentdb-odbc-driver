name: Timestream ODBC Driver for Linux

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  CI_OUTPUT_PATH: "ci-output"
  ODBC_LIB_PATH: "./build/odbc/lib"
  ODBC_BIN_PATH: "./build/odbc/bin"
  ODBC_BUILD_PATH: "./build/odbc/build"
  AWS_SDK_INSTALL_PATH: "./build/aws-sdk/install"

jobs:
  build-linux64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: run-cppcheck
      run: |
        sudo apt install cppcheck
        sh run_cppcheck.sh
    - name: upload-cppcheck-results
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: cppcheck-results
        path: cppcheck-results.log
    - name: get-dependencies
      run: |
        sudo apt update
        sudo apt install libcurl4-openssl-dev libssl-dev uuid-dev zlib1g-dev libpulse-dev linux-headers-$(uname -r) gcc gcc-multilib  g++ g++-multilib cmake linux-headers-$(uname -r) build-essential valgrind
    - name: prepare-dsn
      run: |
        # TODO: This is broken, needs to be fixed
        echo "!!!!!!!!!ls /home/runner"
        ls /home/runner
        echo "!!!!!!!!!ls /home/runner/runners"
        ls /home/runner/runners
        echo "!!!!!!!!!ls /etc/odbc"
        ls /etc/odbc
        echo "!!!!!!!!!ls ~/.odbc"
        ls ~/.odbc
        sudo mv ./src/IntegrationTests/ITODBCConnection/odbc-linux.ini /home/runner/odbc.ini
        sudo mv ./src/IntegrationTests/ITODBCConnection/odbcinst-linux.ini /home/runner/odbcinst.ini
        mkdir /home/runner/work/timestream-odbc/timestream-odbc/odbc-logs
        export ODBCSYSINI=/home/runner
        export ODBCINSTINI=odbcinst.ini
        export ODBCINI=/home/runner/odbc.ini
        echo "!!!!!!!!!printenv ODBCSYSINI ODBCINSTINI ODBCINI"
        printenv ODBCSYSINI ODBCINSTINI ODBCINI
        echo "!!!!!!!!!odbcinst -q -d"
        odbcinst -q -d
        echo "!!!!!!!!!odbcinst -q -s"
        odbcinst -q -s
        echo "!!!!!!!!!odbcinst -j"
        odbcinst -j
        echo "!!!!!!!!!cat /home/runner/odbc.ini"
        cat /home/runner/odbc.ini
        echo "!!!!!!!!!cat /home/runner/odbcinst.ini"
        cat /home/runner/odbcinst.ini
    - name: configure-and-build-driver
      run: |
        ./build_linux_release64_rpm.sh
    - name: configure-aws-credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: run-connection-unit-test
      run: |
        ./build/odbc/bin/ut_conn
    - name: run-integration-connection-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_connection
    - name: run-integration-execution-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_execution
    - name: run-integration-results-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_results
    - name: run-integration-descriptors-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_descriptors
    - name: run-integration-catalog-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_catalog
    - name: run-integration-info-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_info
    - name: run-integration-pagination-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_pagination
    - name: prepare-test-results
      if: always()
      run: |
        cp /tmp/timestreamodbc_*.log ${{ github.workspace }}/odbc-logs/
    - name: upload-integration-test-results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: integration-test-results-linux64
        path: |
          ${{ github.workspace }}/odbc-logs/
    - name: build-installer-rpm
      if: always()
      run: |
        cd cmake-build64
        cmake ../src
        make
        cpack .
        cd ..
    - name: build-installer-deb
      if: always()
      run: |
        ./build_linux_release64_deb.sh
        cd cmake-build64
        cmake ../src
        make
        cpack .
        cd ..
    - name: create-output
      if: success()
      run: |
        mkdir build-output
        mkdir test-output
        mkdir rpm-installer
        mkdir deb-installer
        cp ./build/odbc/lib/*.so build-output/
        cp ./build/odbc/lib/*.a build-output/
        cp ./cmake-build64/*.rpm rpm-installer/
        cp ./cmake-build64/*.deb deb-installer/
    - name: upload-build
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: linux64-build
        path: build-output
    - name: upload-linux64-installer-rpm
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: linux64-installer-rpm
        path: installer-rpm
    - name: upload-linux64-installer-deb
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: linux64-installer-deb
        path: installer-deb
  build-linux32:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: run-cppcheck
      run: |
        sudo apt install cppcheck
        sh run_cppcheck.sh
    - name: upload-cppcheck-results
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: cppcheck-results
        path: cppcheck-results.log
    - name: get-dependencies
      run: |
        # Need to install i386 versions
        sudo dpkg --add-architecture i386
        sudo apt update 
        sudo apt install unixodbc-dev:i386 odbcinst1debian2:i386 libodbc1:i386 libcurl4-openssl-dev:i386 libssl-dev:i386 uuid-dev:i386 cpp:i386 cpp-9:i386 gcc:i386 g++:i386 zlib1g-dev:i386 linux-headers-$(uname -r) gcc-multilib:i386 g++-multilib:i386 cmake g++-9:i386 gcc-9:i386 gcc-9-multilib:i386 g++-9-multilib:i386 binutils:i386 make:i386
    - name: prepare-dsn
      run: |
        # TODO: This is broken, needs to be
        sudo mv ./src/IntegrationTests/ITODBCConnection/odbc-linux.ini /home/runner/odbc.ini
        sudo mv ./src/IntegrationTests/ITODBCConnection/odbcinst-linux.ini /home/runner/odbcinst.ini
        mkdir ${{ github.workspace }}/odbc-logs
        export ODBCSYSINI=/home/runner
        export ODBCINSTINI=odbcinst.ini
        export ODBCINI=/home/runner/odbc.ini
        printenv ODBCSYSINI ODBCINSTINI ODBCINI
        odbcinst -q -d
        odbcinst -q -s
        odbcinst -j
        cat /home/runner/odbc.ini
        cat /home/runner/odbcinst.ini
    - name: configure-aws-credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: configure-and-build-driver
      run: |
        ./build_linux_release32_rpm.sh
    - name: run-connection-unit-test
      run: |
        ./build/odbc/bin/ut_conn
    - name: run-integration-connection-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_connection
    - name: run-integration-execution-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_execution
    - name: run-integration-results-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_results
    - name: run-integration-descriptors-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_descriptors
    - name: run-integration-catalog-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_catalog
    - name: run-integration-info-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_info
    - name: run-integration-pagination-tests
      if: always()
      run: |
        ./build/odbc/bin/itodbc_pagination
    - name: prepare-test-results
      if: always()
      run: |
        cp /tmp/timestreamodbc_*.log ${{ github.workspace }}/odbc-logs/
    - name: upload-integration-test-results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: integration-test-results-linux32
        path: |
          ${{ github.workspace }}/odbc-logs/
    - name: build-installer-rpm
      if: always()
      run: |
        cd cmake-build32
        cmake ../src
        make
        cpack .
        cd ..
    - name: build-installer-deb
      if: always()
      run: |
        ./build_linux_release32_deb.sh
        cd cmake-build32
        cmake ../src
        make
        cpack .
        cd ..
    - name: create-output
      if: success()
      run: |
        mkdir build-output
        mkdir test-output
        mkdir rpm-installer
        mkdir deb-installer
        cp ./build/odbc/lib/*.so build-output/
        cp ./build/odbc/lib/*.a build-output/
        cp ./cmake-build32/*.rpm rpm-installer/
        cp ./cmake-build32/*.deb deb-installer/
    - name: upload-build
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: linux32-build
        path: build-output
    - name: upload-linux32-installer-rpm
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: linux32-installer-rpm
        path: installer-rpm
    - name: upload-linux32-installer-deb
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: linux32-installer-deb
        path: installer-deb
