name: ODBC Driver for Linux

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  CI_OUTPUT_PATH: "ci-output"
  ODBC_LIB_PATH: "${{github.workspace}}/build/odbc/lib"
  ODBC_BIN_PATH: "${{github.workspace}}/build/odbc/bin"
  ODBC_BUILD_PATH: "${{github.workspace}}/build/odbc/build"
  DOCUMENTDB_HOME: "${{github.workspace}}/build/odbc/bin"
  DOC_DB_KEYPAIR: ${{secrets.DOC_DB_KEYPAIR}}
  DOC_DB_USER_NAME: ${{secrets.DOC_DB_USER_NAME}}
  DOC_DB_PASSWORD: ${{secrets.DOC_DB_PASSWORD}}
  DOC_DB_USER: ${{secrets.DOC_DB_USER}}
  DOC_DB_HOST: ${{secrets.DOC_DB_HOST}}
  DOC_DB_LOCAL_PORT: 27019
  DOC_DB_REMOTE_PORT: 27017
  DOC_DB_PRIV_KEY_FILE: ~/certs/docdb-sshtunnel.pem
  JDBC_DRIVER_VERSION: "1.2.0"

jobs:
  build-linux64:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Get Java distribution
      run: | 
        sudo apt-get -y install software-properties-common
        wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -
        sudo apt-add-repository 'deb https://apt.corretto.aws stable main'
        sudo apt-get update
        sudo apt-get install -y java-17-amazon-corretto-jdk
        $env:JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto/
        
    - name: Get latest version of CMake
      uses: lukka/get-cmake@latest
    
    - name: run-cppcheck
      run: |
        sudo apt install cppcheck
        sh run_cppcheck.sh
  
    - name: upload-cppcheck-results
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: cppcheck-results
        path: cppcheck-results.log
  
    - name: Extract key-pair into file
      run: |
        mkdir ~/certs
        echo "${{env.DOC_DB_KEYPAIR}}" > ${{env.DOC_DB_PRIV_KEY_FILE}}
        chmod 400 ${{env.DOC_DB_PRIV_KEY_FILE}}

    - name: get-dependencies
      if: success()
      run: |
        sudo apt update
        sudo apt install libcurl4-openssl-dev libssl-dev uuid-dev zlib1g-dev libpulse-dev linux-headers-$(uname -r) gcc gcc-multilib  g++ g++-multilib linux-headers-$(uname -r) build-essential valgrind libboost-all-dev libbson-dev libsasl2-dev lcov

    # - name: cache-build-and-install-mongocxx
    #   id: cache-build-and-install-mongocxx
    #   uses: actions/cache@v3
    #   with:
    #     path: | 
    #       mongo-c-driver-1.21.1
    #       mongo-cxx-driver
    #     key: ${{ runner.os }}-build-and-install-mongocxx

    - name: Cache DocumentDB JDBC JAR
      id: cache-documentdb-jdbc-jar
      uses: actions/cache@v3
      with:
        path: | 
          cache/jar
        key: cache-documentdb-jdbc-jar-${{env.JDBC_DRIVER_VERSION}}

    - name: Download DocumentDB JDBC JAR
      if: steps.cache-documentdb-jdbc-jar.outputs.cache-hit != 'true'
      run: |
        mkdir -p cache/jar
        cd cache/jar
        wgethttps://github.com/aws/amazon-documentdb-jdbc-driver/releases/download/vdocumentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}/documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar

    - name: Install DocumentDB JDBC JAR
      run: |
        mkdir -p ${{env.ODBC_BIN_PATH}}/libs
        cp cache/jar/documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar ${{env.ODBC_BIN_PATH}}/libs

    - name: build-and-install-mongocxx
      # if: steps.cache-build-and-install-mongocxx.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/mongodb/mongo-c-driver/releases/download/1.21.1/mongo-c-driver-1.21.1.tar.gz
        tar xzf mongo-c-driver-1.21.1.tar.gz
        cd mongo-c-driver-1.21.1
        mkdir -p cmake-build
        cd cmake-build
        cmake -DENABLE_AUTOMATIC_INIT_AND_CLEANUP=OFF ..
        sudo make install
        cd ../..
        git clone https://github.com/mongodb/mongo-cxx-driver.git       --branch releases/stable --depth 1
        cd mongo-cxx-driver/build
        cmake ..       -DCMAKE_BUILD_TYPE=Release       -DBSONCXX_POLY_USE_MNMLSTC=1  -DCMAKE_INSTALL_PREFIX=/usr/local
        sudo make install
    
    - name: install-mongocxx
      run: |
        cd mongo-c-driver-1.21.1/cmake-build
        cmake -DENABLE_AUTOMATIC_INIT_AND_CLEANUP=OFF ..
        sudo make install
        cd ../../
        cd mongo-cxx-driver/build
        cmake ..       -DCMAKE_BUILD_TYPE=Release       -DBSONCXX_POLY_USE_MNMLSTC=1  -DCMAKE_INSTALL_PREFIX=/usr/local
        sudo make install
        
    - name: configure-and-build-driver
      run: |
        ./build_linux_release64_deb.sh

    - name: register-odbc-driver
      run: |
        chmod +r -R ${{env.ODBC_LIB_PATH}}
        chmod +x scripts/register_driver_unix.sh
        sudo bash scripts/register_driver_unix.sh

    - name: set-up-local-mongodb
      run: |
        docker run --name mongo -e MONGO_INITDB_ROOT_USERNAME=${{env.DOC_DB_USER_NAME}} -e MONGO_INITDB_ROOT_PASSWORD=${{env.DOC_DB_PASSWORD}} -d -p 27017:27017 mongo:latest
        chmod +x ./src/odbc-test/scripts/import_test_data.sh
        ./src/odbc-test/scripts/import_test_data.sh

    # - name: run-tests
    #   run: |
    #     ssh -f -N -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ${{env.DOC_DB_PRIV_KEY_FILE}} -L${{env.DOC_DB_LOCAL_PORT}}:${{secrets.DOC_DB_HOST}}:${{env.DOC_DB_REMOTE_PORT}} ${{secrets.DOC_DB_USER}}
    #     ./build/odbc/bin/ignite-odbc-tests
  
    - name: upload-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Ubuntu 20.04 Build Unit Test Results Check"
        comment_title: "Ubuntu 20.04 Build Unit Test Results"
        files: ./odbc_test_result.xml

    # - name: build-deb-installer
    #   if: success()
    #   run: |
    #     cd cmake-build64
    #     cmake ../src
    #     make -j4
    #     cpack .
    #     cd ..
    # - name: create-output
    #   if: success()
    #   run: |
    #     mkdir deb-installer
    #     mkdir build-output
    #     mkdir test-output
    #     cp -v ./build/odbc/lib/*.a build-output/
    #     cp -v ./build/odbc/lib/*.so build-output/
    #     cp -v ./cmake-build64/*.deb deb-installer/
    # - name: upload-build
    #   if: success()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: linux64-build
    #     path: build-output
    # - name: upload-linux64-deb-installer
    #   if: success()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: linux64-deb-installer
    #     path: deb-installer
  # build-linux32:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Setup cmake
  #     uses: jwlawson/actions-setup-cmake@v1.11
  #     with:
  #       cmake-version: '3.21.4'
  #   - uses: actions/checkout@v2
  #   - name: run-cppcheck
  #     run: |
  #       sudo apt install cppcheck
  #       sh run_cppcheck.sh
  #   - name: upload-cppcheck-results
  #     if: failure()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: cppcheck-results
  #       path: cppcheck-results.log
  #   - name: get-dependencies
  #     if: success()
  #     run: |
  #       # Need to install i386 versions
  #       sudo dpkg --add-architecture i386
  #       sudo apt update
  #       sudo apt install unixodbc:i386 unixodbc-dev:i386 odbcinst1debian2:i386 libodbc1:i386 libcurl4-openssl-dev:i386 libssl-dev:i386 uuid-dev:i386 cpp:i386 cpp-9:i386 gcc:i386 g++:i386 zlib1g-dev:i386 linux-headers-$(uname -r) gcc-multilib:i386 g++-multilib:i386 g++-9:i386 gcc-9:i386 gcc-9-multilib:i386 g++-9-multilib:i386 binutils:i386 make:i386
  #   - name: prepare-dsn
  #     if: success()
  #     run: |
  #       sudo cp ./src/Tests/Tests/odbc-linux32.ini /etc/odbc.ini
  #       sudo cp ./src/Tests/Tests/odbcinst-linux32.ini /etc/odbcinst.ini
  #       mkdir -p ${{ github.workspace }}/odbc-logs
  #       export ODBCSYSINI=/etc/
  #       export ODBCINSTINI=odbcinst.ini
  #       export ODBCINI=/etc/odbc.ini
  #   - name: configure-and-build-driver
  #     if: success()
  #     run: |
  #       ./build_linux_release32_deb.sh
  #   - name: run-tests
  #     if: success()
  #     run: |
  #       ./build/odbc/bin/tests --gtest_output="xml:report.xml"
  #   - name: prepare-test-results
  #     if: always()
  #     run: |
  #       cp ${{ github.workspace }}/report.xml ${{ github.workspace }}/odbc-logs/
  #   - name: upload-test-report
  #     if: failure()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: test-results-linux32
  #       path: ${{ github.workspace }}/report.xml
  #   - name: build-deb-installer
  #     if: success()
  #     run: |
  #       cd cmake-build32
  #       cmake ../src
  #       make -j4
  #       cpack .
  #       cd ..
  #   - name: create-output
  #     if: success()
  #     run: |
  #       mkdir deb-installer
  #       mkdir build-output
  #       mkdir test-output
  #       cp -v ./build/odbc/lib/*.a build-output/
  #       cp -v ./build/odbc/lib/*.so build-output/
  #       cp -v ./cmake-build32/*.deb deb-installer/
  #   - name: upload-build
  #     if: success()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: linux32-build
  #       path: build-output
  #   - name: upload-linux32-deb-installer
  #     if: success()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: linux32-deb-installer
  #       path: deb-installer
