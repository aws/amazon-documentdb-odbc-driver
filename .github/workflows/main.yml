name: Timestream ODBC Driver

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  CI_OUTPUT_PATH: "ci-output"
  ODBC_LIB_PATH: "./build/odbc/lib"
  ODBC_BIN_PATH: "./build/odbc/bin"
  ODBC_BUILD_PATH: "./build/odbc/build"
  AWS_SDK_INSTALL_PATH: "./build/aws-sdk/install"

jobs:
  build-windows32:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Get specific version CMake, v3.20.1
      uses: lukka/get-cmake@v3.20.1
    - name: add-msbuild-to-path
      uses: microsoft/setup-msbuild@v1.0.2
    - name: configure-and-build-driver
      run: |
        .\build_win_release32.ps1
    - name: build-integration-tests
      run: |
        MSBuild.exe ./build/odbc/cmake/global_make_list.sln -property:Configuration=Release,Platform=Win32
    - name: configure-aws-credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: import-registry
      run: |
        reg import .\src\IntegrationTests\ITODBCConnection\AWSProfileRegistry_Win32.reg
        reg import .\src\IntegrationTests\ITODBCConnection\IAMRegistry_Win32.reg
        mkdir ${{ github.workspace }}\odbc-logs
    - name: run-connection-unit-test
      run: |
        .\build\odbc\bin\Release\ut_conn.exe
    - name: run-integration-connection-tests
      run: |
        .\build\odbc\bin\Release\itodbc_connection.exe
    - name: run-integration-execution-tests
      run: |
        .\build\odbc\bin\Release\itodbc_execution.exe
    - name: run-integration-results-tests
      run: |
        .\build\odbc\bin\Release\itodbc_results.exe
    - name: run-integration-descriptors-tests
      run: |
        .\build\odbc\bin\Release\itodbc_descriptors.exe
    - name: run-integration-catalog-tests
      run: |
        .\build\odbc\bin\Release\itodbc_catalog.exe
    - name: run-integration-info-tests
      run: |
        .\build\odbc\bin\Release\itodbc_info.exe
    - name: run-integration-pagination-tests
      run: |
        .\build\odbc\bin\Release\itodbc_pagination.exe
    - name: upload-integration-test-results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: integration-test-results-win32
        path: ${{ github.workspace }}\odbc-logs\
    - name: build-installer
      if: success()
      run: |
        .\scripts\build_installer.ps1 Release Win32 .\src $Env:ODBC_BUILD_PATH $Env:AWS_SDK_INSTALL_PATH
    #- name: test
    #  run: |
    #    cp .\\libraries\\VisualLeakDetector\\bin32\\*.* .\\bin32\\Release
    #    cp .\\libraries\\VisualLeakDetector\\lib32\\*.lib .\\lib32\\Release
    #    .\run_test_runner.bat
    - name: prepare-output
      if: always()
      run: |
        .\scripts\prepare_ci_output.ps1 $Env:ODBC_BIN_PATH $Env:ODBC_LIB_PATH $Env:ODBC_BUILD_PATH
    - name: upload-build
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: windows32-build
        path: ci-output/build
    - name: upload-installer
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: windows32-installer
        path: ci-output/installer
    #- name: upload-test-results
    #  if: always()
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: windows-test-results
    #    path: $CI_OUTPUT_PATH/test
  build-windows64:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Get specific version CMake, v3.20.1
      uses: lukka/get-cmake@v3.20.1
    - name: add-msbuild-to-path
      uses: microsoft/setup-msbuild@v1.0.2
    - name: configure-and-build-driver
      run: |
        .\build_win_release64.ps1
    - name: build-integration-tests
      run: |
        MSBuild.exe ./build/odbc/cmake/global_make_list.sln -property:Configuration=Release,Platform=x64
    - name: configure-aws-credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: import-registry
      run: |
        reg import .\src\IntegrationTests\ITODBCConnection\AWSProfileRegistry.reg
        reg import .\src\IntegrationTests\ITODBCConnection\IAMRegistry.reg
        mkdir ${{ github.workspace }}\odbc-logs
    - name: run-connection-unit-test
      run: |
        .\build\odbc\bin\Release\ut_conn.exe
    - name: run-integration-connection-tests
      run: |
        .\build\odbc\bin\Release\itodbc_connection.exe
    - name: run-integration-execution-tests
      run: |
        .\build\odbc\bin\Release\itodbc_execution.exe
    - name: run-integration-results-tests
      run: |
        .\build\odbc\bin\Release\itodbc_results.exe
    - name: run-integration-descriptors-tests
      run: |
        .\build\odbc\bin\Release\itodbc_descriptors.exe
    - name: run-integration-catalog-tests
      run: |
        .\build\odbc\bin\Release\itodbc_catalog.exe
    - name: run-integration-info-tests
      run: |
        .\build\odbc\bin\Release\itodbc_info.exe
    - name: run-integration-pagination-tests
      run: |
        .\build\odbc\bin\Release\itodbc_pagination.exe
    - name: upload-integration-test-results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: integration-test-results-win64
        path: ${{ github.workspace }}\odbc-logs\
    - name: build-installer
      if: success()
      run: |
        .\scripts\build_installer.ps1 Release x64 .\src $Env:ODBC_BUILD_PATH $Env:AWS_SDK_INSTALL_PATH
    #- name: test
    #  run: |
    #    cp .\\libraries\\VisualLeakDetector\\bin64\\*.* .\\bin64\\Release
    #    cp .\\libraries\\VisualLeakDetector\\lib64\\*.lib .\\lib64\\Release
    #    .\run_test_runner.bat
    - name: prepare-output
      if: always()
      run: |
        .\scripts\prepare_ci_output.ps1 $Env:ODBC_BIN_PATH $Env:ODBC_LIB_PATH $Env:ODBC_BUILD_PATH
    - name: upload-build
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: windows64-build
        path: ci-output/build
    - name: upload-installer
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: windows64-installer
        path: ci-output/installer
    #- name: upload-test-results
    #  if: always()
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: windows-test-results
    #    path: ci-output/test-output
