name: ODBC Driver for Windows

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  CI_OUTPUT_PATH: "ci-output"
  ODBC_LIB_PATH: "${{github.workspace}}/build/odbc/lib"
  ODBC_BIN_PATH: "${{github.workspace}}/build/odbc/bin/Release"
  ODBC_DEBUG_PATH: "${{github.workspace}}/build/odbc/bin/Debug"
  ODBC_BUILD_PATH: "${{github.workspace}}/build/odbc/cmake"
  VCPKG_ROOT: "c:/vcpkg"
  DOCUMENTDB_HOME: "${{github.workspace}}/build/odbc/bin/Release"
  DOC_DB_KEYPAIR: ${{secrets.DOC_DB_KEYPAIR}}
  DOC_DB_USER_NAME: ${{secrets.DOC_DB_USER_NAME}}
  DOC_DB_PASSWORD: ${{secrets.DOC_DB_PASSWORD}}
  DOC_DB_USER: ${{secrets.DOC_DB_USER}}
  DOC_DB_HOST: ${{secrets.DOC_DB_HOST}}
  DOC_DB_ODBC_INTEGRATION_TEST: 1
  DOC_DB_LOCAL_PORT: 27019
  DOC_DB_REMOTE_PORT: 27017
  DOC_DB_PRIV_KEY_FILE: ~/certs/docdb-sshtunnel.pem
  DOC_DB_LOG_PATH: "${{github.workspace}}/build/odbc/logs"
  DOC_DB_LOG_LEVEL: "debug"
  JDBC_DRIVER_VERSION: "1.2.1"
  MONGO_IMPORT_COMMAND: "C:/ProgramData/chocolatey/lib/mongodb-database-tools/tools/mongodb-database-tools-windows-x86_64-100.5.2binmongoimport.exe"

jobs:
  build-windows32:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v2
    - name: setup-cppcheck
      id: setup_cppcheck
      run: |
        choco install cppcheck -y
        echo "C:\Program Files\Cppcheck" >> $env:GITHUB_PATH
        
    - name: run-cppcheck
      id: run-cppcheck
      run: |
        .\run_cppcheck.ps1
    - name: upload-cppcheck-results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: cppcheck-results
        path: cppcheck-results.log 
    - name: Get Java distribution
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'
        architecture: x86

    - name: "Update path for Java"
      run: |
        echo "${{ env.JAVA_HOME }}\bin\server" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: "Update path for WIX Toolset"
      run: |
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Get latest version of CMake
      uses: lukka/get-cmake@latest

    - name: add-msbuild-to-path
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Extract key-pair into file
      run: |
        mkdir -p ~/certs
        echo "${{env.DOC_DB_KEYPAIR}}" > ~/certs/docdb-sshtunnel.pem
        chmod 400 ~/certs/docdb-sshtunnel.pem
        mkdir -p ~/.ssh
        copy ./src/odbc-test/config/ssh_config ~/.ssh/config

    - name: Cache dependencies Windows 32
      id: cache-dependencies-windows-32
      uses: actions/cache@v3
      with:
        path: | 
          ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-cache-dependencies-windows-32-v1

    - name: Cache DocumentDB JDBC JAR
      id: cache-documentdb-jdbc-jar
      uses: actions/cache@v3
      with:
        path: | 
          cache/jar
        key: cache-documentdb-jdbc-jar-${{env.JDBC_DRIVER_VERSION}}

    - name: Download DocumentDB JDBC JAR
      if: steps.cache-documentdb-jdbc-jar.outputs.cache-hit != 'true'
      run: |
        mkdir -p cache/jar
        cd cache/jar
        Invoke-WebRequest https://github.com/aws/amazon-documentdb-jdbc-driver/releases/download/v${{env.JDBC_DRIVER_VERSION}}/documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar -o documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar

    - name: Install DocumentDB JDBC JAR
      run: |
        mkdir -p ${{env.ODBC_BIN_PATH}}/libs
        cp cache/jar/documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar ${{env.ODBC_BIN_PATH}}/libs

    - name: Install dependencies Windows
      run: vcpkg integrate install; vcpkg install mongo-cxx-driver:x86-windows openssl:x86-windows boost-test:x86-windows boost-asio:x86-windows boost-chrono:x86-windows boost-interprocess:x86-windows boost-regex:x86-windows boost-system:x86-windows boost-thread:x86-windows
      env:
        VCPKG_ROOT: ${{ env.VCPKG_ROOT }}

    - name: configure-and-build-driver
      run: |
        .\build_win_release32.ps1
      env:
        OPENSSL_ROOT_DIR: '${{ env.VCPKG_ROOT }}/packages/openssl_x86-windows'

    - name: register-driver
      run: |
        .\src\odbc\install\install_amd64.cmd ${{env.ODBC_BIN_PATH}}\ignite.odbc.dll ${{env.ODBC_BIN_PATH}}\ignite.odbc.dll

    - name: Setup MongoDB
      run: |
        ./src/odbc-test/scripts/reinstall_mongodb.ps1
    - name: Import test data
      run: |
        ./src/odbc-test/scripts/import_test_data.ps1

    - name: run-tests
      run: |
        mkdir -p "${{env.DOC_DB_LOG_PATH}}"
        Start-Process -NoNewWindow ssh "-f -N -o UserKnownHostsFile=/temp -o StrictHostKeyChecking=no -i ${{env.DOC_DB_PRIV_KEY_FILE}} -L${{env.DOC_DB_LOCAL_PORT}}:${{secrets.DOC_DB_HOST}}:${{env.DOC_DB_REMOTE_PORT}} ${{secrets.DOC_DB_USER}}"
        ${{env.ODBC_BIN_PATH}}/ignite-odbc-tests.exe

    - name: upload-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Windows x32 Build Unit Test Results Check"
        comment_title: "Windows 2022 (x32) Build Unit Test Results"
        files: ./odbc_test_result.xml
    # - name: build-installer
    #   if: success()
    #   run: |
    #     .\scripts\build_installer.ps1 Release Win32 .\src $Env:ODBC_BUILD_PATH $Env:AWS_SDK_INSTALL_PATH
    # - name: prepare-output
    #   if: success()
    #   run: |
    #     .\scripts\prepare_ci_output.ps1 $Env:ODBC_BIN_PATH $Env:ODBC_LIB_PATH $Env:ODBC_BUILD_PATH
    # - name: upload-build
    #   if: always()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: windows32-build
    #     path: ci-output/build
    # - name: upload-installer
    #   if: success()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: windows32-installer
    #     path: ci-output/installer
    # - name: upload-test-results
    #   if: always()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: windows-test-results
    #     path: $CI_OUTPUT_PATH/test
  build-windows64:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v2
    - name: run-cppcheck
      id: setup_cppcheck
      run: |
        choco install cppcheck -y
        echo "C:\Program Files\Cppcheck" >> $env:GITHUB_PATH
    - name: run-cppcheck
      id: run-cppcheck
      run: |
        .\run_cppcheck.ps1
    - name: upload-cppcheck-results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: cppcheck-results
        path: cppcheck-results.log 
    - name: Get Java distribution
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'
        architecture: x64

    - name: "Update path for Java"
      run: |
        echo "${{env.JAVA_HOME}}\bin\server" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: "Update path for WIX Toolset"
      run: |
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Get latest version of CMake
      uses: lukka/get-cmake@latest

    - name: add-msbuild-to-path
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Extract key-pair into file
      run: |
        mkdir -p ~/certs
        echo "${{env.DOC_DB_KEYPAIR}}" > ~/certs/docdb-sshtunnel.pem
        chmod 400 ~/certs/docdb-sshtunnel.pem
        mkdir -p ~/.ssh
        copy ./src/odbc-test/config/ssh_config ~/.ssh/config

    - name: Cache dependencies Windows 64
      id: cache-dependencies-windows-64
      uses: actions/cache@v3
      with:
        path: | 
          ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-cache-dependencies-windows-64-v1

    - name: Cache DocumentDB JDBC JAR
      id: cache-documentdb-jdbc-jar
      uses: actions/cache@v3
      with:
        path: | 
          cache/jar
        key: cache-documentdb-jdbc-jar-${{env.JDBC_DRIVER_VERSION}}

    - name: Download DocumentDB JDBC JAR
      if: steps.cache-documentdb-jdbc-jar.outputs.cache-hit != 'true'
      run: |
        mkdir -p cache/jar
        cd cache/jar
        Invoke-WebRequest https://github.com/aws/amazon-documentdb-jdbc-driver/releases/download/v${{env.JDBC_DRIVER_VERSION}}/documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar -o documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar
    - name: Install DocumentDB JDBC JAR
      run: |
        mkdir -p ${{env.ODBC_BIN_PATH}}/libs
        cp cache/jar/documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar ${{env.ODBC_BIN_PATH}}/libs
        
    - name: Install dependencies Windows
      run: vcpkg integrate install; vcpkg install mongo-cxx-driver:x64-windows openssl:x64-windows boost-test:x64-windows boost-asio:x64-windows boost-chrono:x64-windows boost-interprocess:x64-windows boost-regex:x64-windows boost-system:x64-windows boost-thread:x64-windows
      env:
        VCPKG_ROOT: ${{env.VCPKG_ROOT}}

    - name: configure-and-build-driver
      run: |
        .\build_win_release64.ps1
      env:
        OPENSSL_ROOT_DIR: '${{env.VCPKG_ROOT}}/packages/openssl_x64-windows'

    - name: Upload ODBC driver build at push to develop
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
      uses: actions/upload-artifact@v3
      with:
        name: docdb-odbc-driver
        path: build/odbc/cmake/Release

    - name: Upload performance test at push to develop
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
      uses: actions/upload-artifact@v3
      with:
        name: performance
        path: build/odbc/bin/Release/performance.exe

    - name: register-driver
      run: |
        .\src\odbc\install\install_amd64.cmd ${{env.ODBC_BIN_PATH}}\ignite.odbc.dll

    - name: Setup MongoDB
      run: |
        ./src/odbc-test/scripts/reinstall_mongodb.ps1
    - name: Import test data
      run: |
        ./src/odbc-test/scripts/import_test_data.ps1

    - name: run-tests
      run: |
        Start-Process -NoNewWindow ssh "-f -N -o UserKnownHostsFile=/temp -o StrictHostKeyChecking=no -i ${{env.DOC_DB_PRIV_KEY_FILE}} -L${{env.DOC_DB_LOCAL_PORT}}:${{secrets.DOC_DB_HOST}}:${{env.DOC_DB_REMOTE_PORT}} ${{secrets.DOC_DB_USER}}"
        ${{env.ODBC_BIN_PATH}}/ignite-odbc-tests.exe

    - name: upload-test-report
      if: always()
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.30
      with:
        check_name: "Windows 2022 (x64) Build Unit Test Results Check"
        comment_title: "Windows 2022 (x64) Build Unit Test Results"
        files: ./odbc_test_result.xml
  #   - name: build-installer
  #     if: success()
  #     run: |
  #       .\scripts\build_installer.ps1 Release x64 .\src $Env:ODBC_BUILD_PATH $Env:AWS_SDK_INSTALL_PATH
  #   - name: prepare-output
  #     if: success()
  #     run: |
  #       .\scripts\prepare_ci_output.ps1 $Env:ODBC_BIN_PATH $Env:ODBC_LIB_PATH $Env:ODBC_BUILD_PATH
  #   - name: upload-build
  #     if: always()
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: windows64-build
  #       path: ci-output/build
  #   - name: upload-installer
  #     if: success()
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: windows64-installer
  #       path: ci-output/installer
  build-windows64_coverage:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v2

    - name: Get Java distribution
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'
        architecture: x64

    - name: "Update path for Java"
      run: |
        echo "${{env.JAVA_HOME}}\bin\server" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: "Update path for WIX Toolset"
      run: |
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Get latest version of CMake
      uses: lukka/get-cmake@latest

    - name: add-msbuild-to-path
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Extract key-pair into file
      run: |
        mkdir -p ~/certs
        echo "${{env.DOC_DB_KEYPAIR}}" > ~/certs/docdb-sshtunnel.pem
        chmod 400 ~/certs/docdb-sshtunnel.pem
        mkdir -p ~/.ssh
        copy ./src/odbc-test/config/ssh_config ~/.ssh/config

    - name: setup-opencppcoverage-and-add-to-path
      id: setup_opencppcoverage
      run: |
        choco install OpenCppCoverage -y
        echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

    - name: Cache dependencies Windows 64
      id: cache-dependencies-windows-64
      uses: actions/cache@v3
      with:
        path: | 
          ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-cache-dependencies-windows-64-v1
    
    - name: Cache DocumentDB JDBC JAR
      id: cache-documentdb-jdbc-jar
      uses: actions/cache@v3
      with:
        path: | 
          cache/jar
        key: cache-documentdb-jdbc-jar-${{env.JDBC_DRIVER_VERSION}}

    - name: Download DocumentDB JDBC JAR
      if: steps.cache-documentdb-jdbc-jar.outputs.cache-hit != 'true'
      run: |
        mkdir -p cache/jar
        cd cache/jar
        Invoke-WebRequest https://github.com/aws/amazon-documentdb-jdbc-driver/releases/download/v${{env.JDBC_DRIVER_VERSION}}/documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar -o documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar
    - name: Install DocumentDB JDBC JAR
      run: |
        mkdir -p ${{env.ODBC_BIN_PATH}}/libs
        cp cache/jar/documentdb-jdbc-${{env.JDBC_DRIVER_VERSION}}-all.jar ${{env.ODBC_BIN_PATH}}/libs
  
    - name: Install dependencies Windows
      run: vcpkg integrate install; vcpkg install mongo-cxx-driver:x64-windows openssl:x64-windows boost-test:x64-windows boost-asio:x64-windows boost-chrono:x64-windows boost-interprocess:x64-windows boost-regex:x64-windows boost-system:x64-windows boost-thread:x64-windows
      env:
        VCPKG_ROOT: ${{env.VCPKG_ROOT}}

    - name: configure-and-build-driver
      run: |
        .\build_win_debug64.ps1
      env:
        OPENSSL_ROOT_DIR: '${{env.VCPKG_ROOT}}/packages/openssl_x64-windows'

    - name: register-driver
      run: |
        .\src\odbc\install\install_amd64.cmd ${{env.ODBC_DEBUG_PATH}}\ignite.odbc.dll

    - name: Setup MongoDB
      run: |
        ./src/odbc-test/scripts/reinstall_mongodb.ps1
    - name: Import test data
      run: |
        ./src/odbc-test/scripts/import_test_data.ps1

    - name: run-tests
      env:
        DOCUMENTDB_HOME: "${{github.workspace}}/build/odbc/bin/Debug"
      run: |
        Start-Process -NoNewWindow ssh "-f -N -o UserKnownHostsFile=/temp -o StrictHostKeyChecking=no -i ${{env.DOC_DB_PRIV_KEY_FILE}} -L${{env.DOC_DB_LOCAL_PORT}}:${{secrets.DOC_DB_HOST}}:${{env.DOC_DB_REMOTE_PORT}} ${{secrets.DOC_DB_USER}}"
        opencppcoverage --sources src --export_type html:coverage --excluded_modules boost_unit_test_framework --excluded_modules ignite-odbc-tests --excluded_modules mongoc --excluded_modules mongocxx --excluded_modules bson --excluded_modules bsoncxx --excluded_modules zlib -- ${{env.ODBC_DEBUG_PATH}}/ignite-odbc-tests.exe

    - name: upload-coverage
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage
        path: coverage

    # 
    # The step below should be uncommented after the codecov is setup
    # - name: Upload Report to Codecov
    #   if: always()
    #   uses: codecov/codecov-action@v2.0.2
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     files: ./coverage.xml
    #     fail_ci_if_error: true
