name: ODBC Driver for Windows

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  CI_OUTPUT_PATH: "ci-output"
  ODBC_LIB_PATH: "./build/odbc/lib"
  ODBC_BIN_PATH: "./build/odbc/bin/Release"
  ODBC_BUILD_PATH: "./build/odbc/cmake"
  VCPKG_ROOT: "c:/vcpkg"
  DOCUMENTDB_HOME: "./build/odbc/bin/Release/libs"

jobs:
  build-windows32:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Get Java distribution
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'
        architecture: x86
    - name: "Update path for Java"
      run: |
        echo "${{ env.JAVA_HOME }}\bin\server" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: "Update path for WIX Toolset"
      run: |
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Get specific version CMake, v3.20.1
      uses: lukka/get-cmake@v3.20.1
    - name: add-msbuild-to-path
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Install dependencies Windows
      run: vcpkg integrate install; vcpkg install openssl:x86-windows boost-test:x86-windows boost-asio:x86-windows boost-chrono:x86-windows boost-interprocess:x86-windows boost-regex:x86-windows boost-system:x86-windows boost-thread:x86-windows
      env:
        VCPKG_ROOT: ${{ env.VCPKG_ROOT }}
    - name: configure-and-build-driver
      run: |
        .\build_win_release32.ps1
      env:
        OPENSSL_ROOT_DIR: '${{ env.VCPKG_ROOT }}/packages/openssl_x86-windows'
    # - name: import-registry
    #   run: |
    #     reg import .\src\Tests\Tests\AWSProfileRegistry_Win32.reg
    #     reg import .\src\Tests\Tests\IAMRegistry_Win32.reg
    #     mkdir ${{ github.workspace }}\odbc-logs
    - name: run-tests
      run: |
        ${{ env.ODBC_BIN_PATH }}/ignite-odbc-tests.exe
    # - name: upload-test-report
    #   if: failure()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: test-logs-win32
    #     path: ${{ github.workspace }}\report.xml
    # - name: build-installer
    #   if: success()
    #   run: |
    #     .\scripts\build_installer.ps1 Release Win32 .\src $Env:ODBC_BUILD_PATH $Env:AWS_SDK_INSTALL_PATH
    # - name: prepare-output
    #   if: success()
    #   run: |
    #     .\scripts\prepare_ci_output.ps1 $Env:ODBC_BIN_PATH $Env:ODBC_LIB_PATH $Env:ODBC_BUILD_PATH
    # - name: upload-build
    #   if: always()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: windows32-build
    #     path: ci-output/build
    # - name: upload-installer
    #   if: success()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: windows32-installer
    #     path: ci-output/installer
    # - name: upload-test-results
    #   if: always()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: windows-test-results
    #     path: $CI_OUTPUT_PATH/test
  build-windows64:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Get Java distribution
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'
        architecture: x64
    - name: "Update path for Java"
      run: |
        echo "${{ env.JAVA_HOME }}\bin\server" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: "Update path for WIX Toolset"
      run: |
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Get specific version CMake, v3.20.1
      uses: lukka/get-cmake@v3.20.1
    - name: add-msbuild-to-path
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Install dependencies Windows
      run: vcpkg integrate install; vcpkg install openssl:x64-windows boost-test:x64-windows boost-asio:x64-windows boost-chrono:x64-windows boost-interprocess:x64-windows boost-regex:x64-windows boost-system:x64-windows boost-thread:x64-windows
      env:
        VCPKG_ROOT: ${{ env.VCPKG_ROOT }}
    - name: configure-and-build-driver
      run: |
        .\build_win_release64.ps1
      env:
        OPENSSL_ROOT_DIR: '${{ env.VCPKG_ROOT }}/packages/openssl_x64-windows'
  #   - name: import-registry
  #     run: |
  #       reg import .\src\Tests\Tests\AWSProfileRegistry.reg
  #       reg import .\src\Tests\Tests\IAMRegistry.reg
  #       mkdir ${{ github.workspace }}\odbc-logs
    - name: run-tests
      run: |
        ${{ env.ODBC_BIN_PATH }}/ignite-odbc-tests.exe
  #   - name: upload-test-report
  #     if: failure()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: test-logs-win64
  #       path: ${{ github.workspace }}\report.xml
  #   - name: build-installer
  #     if: success()
  #     run: |
  #       .\scripts\build_installer.ps1 Release x64 .\src $Env:ODBC_BUILD_PATH $Env:AWS_SDK_INSTALL_PATH
  #   - name: prepare-output
  #     if: success()
  #     run: |
  #       .\scripts\prepare_ci_output.ps1 $Env:ODBC_BIN_PATH $Env:ODBC_LIB_PATH $Env:ODBC_BUILD_PATH
  #   - name: upload-build
  #     if: always()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: windows64-build
  #       path: ci-output/build
  #   - name: upload-installer
  #     if: success()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: windows64-installer
  #       path: ci-output/installer
  # build-windows64_coverage:
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Get Java distribution
  #     uses: actions/setup-java@v2
  #     with:
  #       distribution: 'temurin'
  #       java-version: '17'
  #       architecture: x64
  #   - name: "Update path for Java"
  #     run: |
  #       echo "${{ env.JAVA_HOME }}\bin\server" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
  #   - name: Get specific version CMake, v3.20.1
  #     uses: lukka/get-cmake@v3.20.1
  #   - name: add-msbuild-to-path
  #     uses: microsoft/setup-msbuild@v1.0.2
  #   - name: setup-opencppcoverage-and-add-to-path
  #     id: setup_opencppcoverage
  #     run: |
  #       choco install OpenCppCoverage -y
  #       echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH
  #   - name: configure-and-build-driver
  #     run: |
  #       .\build_win_debug64.ps1
  #   - name: import-registry
  #     run: |
  #       reg import .\src\Tests\Tests\AWSProfileRegistry.reg
  #       reg import .\src\Tests\Tests\IAMRegistry.reg
  #   - name: run-tests
  #     run: |
  #       opencppcoverage --sources src --excluded_modules ut_conn --excluded_modules ut_helper --excluded_modules gtest --excluded_modules aws --export_type cobertura:coverage.xml -- ${{ github.workspace }}\build\odbc\bin\Debug\tests.exe --gtest_output="xml:report.xml"
  #   - name: upload-coverage
  #     if: always()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: coverage.xml
  #       path: ./coverage.xml
    # The step below should be uncommented after the codecov is setup
    # - name: Upload Report to Codecov
    #   if: always()
    #   uses: codecov/codecov-action@v2.0.2
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     files: ./coverage.xml
    #     fail_ci_if_error: true
