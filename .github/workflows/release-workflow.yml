name: Build and Release database-odbc
# This workflow is triggered on creating tags to master
on:
  push:
    tags:
      - 'v*'

env:
  CI_OUTPUT_PATH: "ci-output"
  ODBC_LIB_PATH: "./build/odbc/lib"
  ODBC_BIN_PATH: "./build/odbc/bin"
  ODBC_BUILD_PATH: "./build/odbc/build"
  AWS_SDK_INSTALL_PATH: "./build/aws-sdk/install"

jobs:
  build-mac:
    runs-on: macos-latest
    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.11
        with:
            cmake-version: '3.21.4'
      - uses: actions/checkout@v2
      - name: Get Java distribution
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          architecture: x64
      - name: run-cppcheck
        run: |
          brew install cppcheck
          sh run_cppcheck.sh
      - name: upload-cppcheck-results
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: cppcheck-results
          path: cppcheck-results.log
      - name: get-dependencies
        run: |
          brew unlink unixodbc
          brew install curl
          brew install libiodbc
      - name: configure-and-build-driver
        run: |
          ./build_mac_release64.sh
      - name: build-installer
        if: success()
        run: |
          cd cmake-build64
          cmake ../src
          make
          cpack .
          cd ..
      - name: create-output
        if: success()
        run: |
          mkdir build-output
          mkdir test-output
          mkdir installer
          cp ./build/odbc/lib/*.dylib build-output/
          cp ./build/odbc/lib/*.a build-output/
          cp ./cmake-build64/*.pkg installer/
      - name: upload-build
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: mac64-build
          path: build-output
      - name: upload-installer
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: mac64-installer
          path: installer
  build-windows32:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Java distribution
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          architecture: x32
      - name: "Update path for Java"
        run: |
          echo "${{ env.JAVA_HOME }}\bin\server" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append      - name: Get specific version CMake, v3.18.3
      - name: Get specific version CMake, v3.18.3
        uses: lukka/get-cmake@v3.18.3
      - name: add-msbuild-to-path
        uses: microsoft/setup-msbuild@v1.0.2
      - name: configure-and-build-driver
        run: |
          .\build_win_release32.ps1
      - name: build-installer
        if: success()
        run: |
          .\scripts\build_installer.ps1 Release Win32 .\src $Env:ODBC_BUILD_PATH $Env:AWS_SDK_INSTALL_PATH
      - name: prepare-output
        if: always()
        run: |
          .\scripts\prepare_ci_output.ps1 $Env:ODBC_BIN_PATH $Env:ODBC_LIB_PATH $Env:ODBC_BUILD_PATH
      - name: upload-build
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: windows32-build
          path: ci-output/build
      - name: upload-installer
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: windows32-installer
          path: ci-output/installer
  build-windows64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Java distribution
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          architecture: x64
      - name: "Update path for Java"
        run: |
          echo "${{ env.JAVA_HOME }}\bin\server" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append      - name: Get specific version CMake, v3.18.3
        uses: lukka/get-cmake@v3.18.3
      - name: add-msbuild-to-path
        uses: microsoft/setup-msbuild@v1.0.2
      - name: configure-and-build-driver
        run: |
          .\build_win_release64.ps1
      - name: build-installer
        if: success()
        run: |
          .\scripts\build_installer.ps1 Release x64 .\src $Env:ODBC_BUILD_PATH $Env:AWS_SDK_INSTALL_PATH
      - name: prepare-output
        if: always()
        run: |
          .\scripts\prepare_ci_output.ps1 $Env:ODBC_BIN_PATH $Env:ODBC_LIB_PATH $Env:ODBC_BUILD_PATH
      - name: upload-build
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: windows64-build
          path: ci-output/build
      - name: upload-installer
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: windows64-installer
          path: ci-output/installer
